// <auto-generated />
using System;
using API.Admin.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Admin.Infrastructure.Migrations
{
    [DbContext(typeof(AdminDbContext))]
    partial class AdminDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Admin.Domain.Aggregates.FeatureInfoAggregate.FeatureInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UserRestrictionsEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeatureName")
                        .IsUnique();

                    b.ToTable("feature_infos", (string)null);
                });

            modelBuilder.Entity("API.Admin.Domain.Aggregates.FeatureInfoAggregate.RestrictedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RestrictedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureInfoId", "RestrictedUserId")
                        .IsUnique();

                    b.ToTable("feature_restricted_users", (string)null);
                });

            modelBuilder.Entity("API.Admin.Domain.Aggregates.FeatureInfoAggregate.TestUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureInfoId", "TestUserId")
                        .IsUnique();

                    b.ToTable("feature_test_users", (string)null);
                });

            modelBuilder.Entity("API.Admin.Domain.Aggregates.FeatureInfoAggregate.RestrictedUser", b =>
                {
                    b.HasOne("API.Admin.Domain.Aggregates.FeatureInfoAggregate.FeatureInfo", null)
                        .WithMany()
                        .HasForeignKey("FeatureInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Admin.Domain.Aggregates.FeatureInfoAggregate.TestUser", b =>
                {
                    b.HasOne("API.Admin.Domain.Aggregates.FeatureInfoAggregate.FeatureInfo", null)
                        .WithMany()
                        .HasForeignKey("FeatureInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
